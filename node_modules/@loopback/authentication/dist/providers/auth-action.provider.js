"use strict";
// Copyright IBM Corp. 2019,2020. All Rights Reserved.
// Node module: @loopback/authentication
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const context_1 = require("@loopback/context");
const rest_1 = require("@loopback/rest");
const security_1 = require("@loopback/security");
const keys_1 = require("../keys");
const types_1 = require("../types");
/**
 * Provides the authentication action for a sequence
 * @example `context.bind('authentication.actions.authenticate').toProvider(AuthenticateActionProvider)`
 */
let AuthenticateActionProvider = class AuthenticateActionProvider {
    constructor(
    // The provider is instantiated for Sequence constructor,
    // at which time we don't have information about the current
    // route yet. This information is needed to determine
    // what auth strategy should be used.
    // To solve this, we are injecting a getter function that will
    // defer resolution of the strategy until authenticate() action
    // is executed.
    getStrategy, setCurrentUser, setRedirectUrl, setRedirectStatus) {
        this.getStrategy = getStrategy;
        this.setCurrentUser = setCurrentUser;
        this.setRedirectUrl = setRedirectUrl;
        this.setRedirectStatus = setRedirectStatus;
    }
    /**
     * @returns authenticateFn
     */
    value() {
        return request => this.action(request);
    }
    /**
     * The implementation of authenticate() sequence action.
     * @param request - The incoming request provided by the REST layer
     */
    async action(request) {
        const strategy = await this.getStrategy();
        if (!strategy) {
            // The invoked operation does not require authentication.
            return undefined;
        }
        const authResponse = await strategy.authenticate(request);
        let userProfile;
        // response from `strategy.authenticate()` could return an object of type UserProfile or RedirectRoute
        if (rest_1.RedirectRoute.isRedirectRoute(authResponse)) {
            const redirectOptions = authResponse;
            // bind redirection url and status to the context
            // controller should handle actual redirection
            this.setRedirectUrl(redirectOptions.targetLocation);
            this.setRedirectStatus(redirectOptions.statusCode);
        }
        else if (authResponse) {
            // if `strategy.authenticate()` returns an object of type UserProfile, set it as current user
            userProfile = authResponse;
            this.setCurrentUser(userProfile);
            return userProfile;
        }
        else if (!authResponse) {
            // important to throw a non-protocol-specific error here
            const error = new Error(`User profile not returned from strategy's authenticate function`);
            Object.assign(error, {
                code: types_1.USER_PROFILE_NOT_FOUND,
            });
            throw error;
        }
    }
};
AuthenticateActionProvider = tslib_1.__decorate([
    tslib_1.__param(0, context_1.inject.getter(keys_1.AuthenticationBindings.STRATEGY)),
    tslib_1.__param(1, context_1.inject.setter(security_1.SecurityBindings.USER)),
    tslib_1.__param(2, context_1.inject.setter(keys_1.AuthenticationBindings.AUTHENTICATION_REDIRECT_URL)),
    tslib_1.__param(3, context_1.inject.setter(keys_1.AuthenticationBindings.AUTHENTICATION_REDIRECT_STATUS)),
    tslib_1.__metadata("design:paramtypes", [Function, Function, Function, Function])
], AuthenticateActionProvider);
exports.AuthenticateActionProvider = AuthenticateActionProvider;
//# sourceMappingURL=auth-action.provider.js.map
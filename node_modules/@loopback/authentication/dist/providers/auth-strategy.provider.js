"use strict";
// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/authentication
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const context_1 = require("@loopback/context");
const core_1 = require("@loopback/core");
const keys_1 = require("../keys");
const types_1 = require("../types");
/**
 * An authentication strategy provider responsible for
 * resolving an authentication strategy by name.
 *
 * It declares an extension point to which all authentication strategy
 * implementations must register themselves as extensions.
 *
 * @example `context.bind('authentication.strategy').toProvider(AuthenticationStrategyProvider)`
 */
let AuthenticationStrategyProvider = class AuthenticationStrategyProvider {
    constructor(authenticationStrategies, metadata) {
        this.authenticationStrategies = authenticationStrategies;
        this.metadata = metadata;
    }
    async value() {
        if (!this.metadata) {
            return undefined;
        }
        const name = this.metadata.strategy;
        const strategy = await this.findAuthenticationStrategy(name);
        if (!strategy) {
            // important to throw a non-protocol-specific error here
            const error = new Error(`The strategy '${name}' is not available.`);
            Object.assign(error, {
                code: types_1.AUTHENTICATION_STRATEGY_NOT_FOUND,
            });
            throw error;
        }
        return strategy;
    }
    async findAuthenticationStrategy(name) {
        const strategies = await this.authenticationStrategies();
        const matchingAuthStrategy = strategies.find(a => a.name === name);
        return matchingAuthStrategy;
    }
};
AuthenticationStrategyProvider = tslib_1.__decorate([
    core_1.extensionPoint(keys_1.AuthenticationBindings.AUTHENTICATION_STRATEGY_EXTENSION_POINT_NAME, { scope: context_1.BindingScope.TRANSIENT }) //this needs to be transient, e.g. for request level context.
    ,
    tslib_1.__param(0, core_1.extensions()),
    tslib_1.__param(1, context_1.inject(keys_1.AuthenticationBindings.METADATA)),
    tslib_1.__metadata("design:paramtypes", [Function, Object])
], AuthenticationStrategyProvider);
exports.AuthenticationStrategyProvider = AuthenticationStrategyProvider;
//# sourceMappingURL=auth-strategy.provider.js.map